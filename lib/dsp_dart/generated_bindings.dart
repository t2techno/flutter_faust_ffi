// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Basic Faust oscillator
class Faust {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Faust(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Faust.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  late final ffi.Pointer<ffi.Double> __HUGE = _lookup<ffi.Double>('_HUGE');

  double get _HUGE => __HUGE.value;

  set _HUGE(double value) => __HUGE.value = value;

  void _fperrraise(
    int _Except,
  ) {
    return __fperrraise(
      _Except,
    );
  }

  late final __fperrraisePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_fperrraise');
  late final __fperrraise = __fperrraisePtr.asFunction<void Function(int)>();

  int _dclass(
    double _X,
  ) {
    return __dclass(
      _X,
    );
  }

  late final __dclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Double)>>('_dclass');
  late final __dclass = __dclassPtr.asFunction<int Function(double)>();

  int _fdclass(
    double _X,
  ) {
    return __fdclass(
      _X,
    );
  }

  late final __fdclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Float)>>('_fdclass');
  late final __fdclass = __fdclassPtr.asFunction<int Function(double)>();

  int _dsign(
    double _X,
  ) {
    return __dsign(
      _X,
    );
  }

  late final __dsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_dsign');
  late final __dsign = __dsignPtr.asFunction<int Function(double)>();

  int _fdsign(
    double _X,
  ) {
    return __fdsign(
      _X,
    );
  }

  late final __fdsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fdsign');
  late final __fdsign = __fdsignPtr.asFunction<int Function(double)>();

  int _dpcomp(
    double _X,
    double _Y,
  ) {
    return __dpcomp(
      _X,
      _Y,
    );
  }

  late final __dpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '_dpcomp');
  late final __dpcomp = __dpcompPtr.asFunction<int Function(double, double)>();

  int _fdpcomp(
    double _X,
    double _Y,
  ) {
    return __fdpcomp(
      _X,
      _Y,
    );
  }

  late final __fdpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '_fdpcomp');
  late final __fdpcomp =
      __fdpcompPtr.asFunction<int Function(double, double)>();

  int _dtest(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dtest(
      _Px,
    );
  }

  late final __dtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Double>)>>(
          '_dtest');
  late final __dtest =
      __dtestPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int _fdtest(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdtest(
      _Px,
    );
  }

  late final __fdtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Float>)>>(
          '_fdtest');
  late final __fdtest =
      __fdtestPtr.asFunction<int Function(ffi.Pointer<ffi.Float>)>();

  int _d_int(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return __d_int(
      _Px,
      _Xexp,
    );
  }

  late final __d_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Short)>>('_d_int');
  late final __d_int =
      __d_intPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fd_int(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return __fd_int(
      _Px,
      _Xexp,
    );
  }

  late final __fd_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Short)>>('_fd_int');
  late final __fd_int =
      __fd_intPtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dscale(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return __dscale(
      _Px,
      _Lexp,
    );
  }

  late final __dscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Long)>>('_dscale');
  late final __dscale =
      __dscalePtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fdscale(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return __fdscale(
      _Px,
      _Lexp,
    );
  }

  late final __fdscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Long)>>('_fdscale');
  late final __fdscale =
      __fdscalePtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dunscale(
      _Pex,
      _Px,
    );
  }

  late final __dunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>>('_dunscale');
  late final __dunscale = __dunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>();

  int _fdunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdunscale(
      _Pex,
      _Px,
    );
  }

  late final __fdunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>>('_fdunscale');
  late final __fdunscale = __fdunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>();

  int _dexp(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __dexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __dexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Double>, ffi.Double, ffi.Long)>>('_dexp');
  late final __dexp = __dexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, double, int)>();

  int _fdexp(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __fdexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __fdexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Float>, ffi.Float, ffi.Long)>>('_fdexp');
  late final __fdexp = __fdexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, double, int)>();

  int _dnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __dnorm(
      _Ps,
    );
  }

  late final __dnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_dnorm');
  late final __dnorm =
      __dnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int _fdnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __fdnorm(
      _Ps,
    );
  }

  late final __fdnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_fdnorm');
  late final __fdnorm =
      __fdnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  double _dpoly(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return __dpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __dpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int)>>('_dpoly');
  late final __dpoly = __dpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Double>, int)>();

  double _fdpoly(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return __fdpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __fdpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Float>, ffi.Int)>>('_fdpoly');
  late final __fdpoly = __fdpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Float>, int)>();

  double _dlog(
    double _X,
    int _Baseflag,
  ) {
    return __dlog(
      _X,
      _Baseflag,
    );
  }

  late final __dlogPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '_dlog');
  late final __dlog = __dlogPtr.asFunction<double Function(double, int)>();

  double _fdlog(
    double _X,
    int _Baseflag,
  ) {
    return __fdlog(
      _X,
      _Baseflag,
    );
  }

  late final __fdlogPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '_fdlog');
  late final __fdlog = __fdlogPtr.asFunction<double Function(double, int)>();

  double _dsin(
    double _X,
    int _Qoff,
  ) {
    return __dsin(
      _X,
      _Qoff,
    );
  }

  late final __dsinPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.UnsignedInt)>>(
      '_dsin');
  late final __dsin = __dsinPtr.asFunction<double Function(double, int)>();

  double _fdsin(
    double _X,
    int _Qoff,
  ) {
    return __fdsin(
      _X,
      _Qoff,
    );
  }

  late final __fdsinPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.UnsignedInt)>>(
      '_fdsin');
  late final __fdsin = __fdsinPtr.asFunction<double Function(double, int)>();

  late final ffi.Pointer<_float_const> __Denorm_C =
      _lookup<_float_const>('_Denorm_C');

  ffi.Pointer<_float_const> get _Denorm_C => __Denorm_C;

  late final ffi.Pointer<_float_const> __Inf_C =
      _lookup<_float_const>('_Inf_C');

  ffi.Pointer<_float_const> get _Inf_C => __Inf_C;

  late final ffi.Pointer<_float_const> __Nan_C =
      _lookup<_float_const>('_Nan_C');

  ffi.Pointer<_float_const> get _Nan_C => __Nan_C;

  late final ffi.Pointer<_float_const> __Snan_C =
      _lookup<_float_const>('_Snan_C');

  ffi.Pointer<_float_const> get _Snan_C => __Snan_C;

  late final ffi.Pointer<_float_const> __Hugeval_C =
      _lookup<_float_const>('_Hugeval_C');

  ffi.Pointer<_float_const> get _Hugeval_C => __Hugeval_C;

  late final ffi.Pointer<_float_const> __FDenorm_C =
      _lookup<_float_const>('_FDenorm_C');

  ffi.Pointer<_float_const> get _FDenorm_C => __FDenorm_C;

  late final ffi.Pointer<_float_const> __FInf_C =
      _lookup<_float_const>('_FInf_C');

  ffi.Pointer<_float_const> get _FInf_C => __FInf_C;

  late final ffi.Pointer<_float_const> __FNan_C =
      _lookup<_float_const>('_FNan_C');

  ffi.Pointer<_float_const> get _FNan_C => __FNan_C;

  late final ffi.Pointer<_float_const> __FSnan_C =
      _lookup<_float_const>('_FSnan_C');

  ffi.Pointer<_float_const> get _FSnan_C => __FSnan_C;

  late final ffi.Pointer<_float_const> __LDenorm_C =
      _lookup<_float_const>('_LDenorm_C');

  ffi.Pointer<_float_const> get _LDenorm_C => __LDenorm_C;

  late final ffi.Pointer<_float_const> __LInf_C =
      _lookup<_float_const>('_LInf_C');

  ffi.Pointer<_float_const> get _LInf_C => __LInf_C;

  late final ffi.Pointer<_float_const> __LNan_C =
      _lookup<_float_const>('_LNan_C');

  ffi.Pointer<_float_const> get _LNan_C => __LNan_C;

  late final ffi.Pointer<_float_const> __LSnan_C =
      _lookup<_float_const>('_LSnan_C');

  ffi.Pointer<_float_const> get _LSnan_C => __LSnan_C;

  late final ffi.Pointer<_float_const> __Eps_C =
      _lookup<_float_const>('_Eps_C');

  ffi.Pointer<_float_const> get _Eps_C => __Eps_C;

  late final ffi.Pointer<_float_const> __Rteps_C =
      _lookup<_float_const>('_Rteps_C');

  ffi.Pointer<_float_const> get _Rteps_C => __Rteps_C;

  late final ffi.Pointer<_float_const> __FEps_C =
      _lookup<_float_const>('_FEps_C');

  ffi.Pointer<_float_const> get _FEps_C => __FEps_C;

  late final ffi.Pointer<_float_const> __FRteps_C =
      _lookup<_float_const>('_FRteps_C');

  ffi.Pointer<_float_const> get _FRteps_C => __FRteps_C;

  late final ffi.Pointer<_float_const> __LEps_C =
      _lookup<_float_const>('_LEps_C');

  ffi.Pointer<_float_const> get _LEps_C => __LEps_C;

  late final ffi.Pointer<_float_const> __LRteps_C =
      _lookup<_float_const>('_LRteps_C');

  ffi.Pointer<_float_const> get _LRteps_C => __LRteps_C;

  late final ffi.Pointer<ffi.Double> __Zero_C = _lookup<ffi.Double>('_Zero_C');

  double get _Zero_C => __Zero_C.value;

  set _Zero_C(double value) => __Zero_C.value = value;

  late final ffi.Pointer<ffi.Double> __Xbig_C = _lookup<ffi.Double>('_Xbig_C');

  double get _Xbig_C => __Xbig_C.value;

  set _Xbig_C(double value) => __Xbig_C.value = value;

  late final ffi.Pointer<ffi.Float> __FZero_C = _lookup<ffi.Float>('_FZero_C');

  double get _FZero_C => __FZero_C.value;

  set _FZero_C(double value) => __FZero_C.value = value;

  late final ffi.Pointer<ffi.Float> __FXbig_C = _lookup<ffi.Float>('_FXbig_C');

  double get _FXbig_C => __FXbig_C.value;

  set _FXbig_C(double value) => __FXbig_C.value = value;

  int abs(
    int _X,
  ) {
    return _abs(
      _X,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _X,
  ) {
    return _labs(
      _X,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _X,
  ) {
    return _llabs(
      _X,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  double acos(
    double _X,
  ) {
    return _acos(
      _X,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asin(
    double _X,
  ) {
    return _asin(
      _X,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atan(
    double _X,
  ) {
    return _atan(
      _X,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double _Y,
    double _X,
  ) {
    return _atan2(
      _Y,
      _X,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double _X,
  ) {
    return _cos(
      _X,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double cosh(
    double _X,
  ) {
    return _cosh(
      _X,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double exp(
    double _X,
  ) {
    return _exp(
      _X,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double fabs(
    double _X,
  ) {
    return _fabs(
      _X,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double fmod(
    double _X,
    double _Y,
  ) {
    return _fmod(
      _X,
      _Y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double log(
    double _X,
  ) {
    return _log(
      _X,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double _X,
  ) {
    return _log10(
      _X,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double pow(
    double _X,
    double _Y,
  ) {
    return _pow(
      _X,
      _Y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sin(
    double _X,
  ) {
    return _sin(
      _X,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double sinh(
    double _X,
  ) {
    return _sinh(
      _X,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double sqrt(
    double _X,
  ) {
    return _sqrt(
      _X,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double tan(
    double _X,
  ) {
    return _tan(
      _X,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double tanh(
    double _X,
  ) {
    return _tanh(
      _X,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double _X,
  ) {
    return _acosh(
      _X,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double _X,
  ) {
    return _asinh(
      _X,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double _X,
  ) {
    return _atanh(
      _X,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double atof(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double _atof_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atof_l');
  late final __atof_l = __atof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  double _cabs(
    _complex _Complex_value,
  ) {
    return __cabs(
      _Complex_value,
    );
  }

  late final __cabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(_complex)>>('_cabs');
  late final __cabs = __cabsPtr.asFunction<double Function(_complex)>();

  double cbrt(
    double _X,
  ) {
    return _cbrt(
      _X,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double _X,
  ) {
    return _ceil(
      _X,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double _chgsign(
    double _X,
  ) {
    return __chgsign(
      _X,
    );
  }

  late final __chgsignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_chgsign');
  late final __chgsign = __chgsignPtr.asFunction<double Function(double)>();

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return _copysign1(
      _Number,
      _Sign,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign1 =
      _copysignPtr.asFunction<double Function(double, double)>();

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return __copysign(
      _Number,
      _Sign,
    );
  }

  late final __copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_copysign');
  late final __copysign =
      __copysignPtr.asFunction<double Function(double, double)>();

  double erf(
    double _X,
  ) {
    return _erf(
      _X,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double _X,
  ) {
    return _erfc(
      _X,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double exp2(
    double _X,
  ) {
    return _exp2(
      _X,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1(
    double _X,
  ) {
    return _expm1(
      _X,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double fdim(
    double _X,
    double _Y,
  ) {
    return _fdim(
      _X,
      _Y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double floor(
    double _X,
  ) {
    return _floor(
      _X,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fma(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double fmax(
    double _X,
    double _Y,
  ) {
    return _fmax(
      _X,
      _Y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double _X,
    double _Y,
  ) {
    return _fmin(
      _X,
      _Y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int> _Y,
  ) {
    return _frexp(
      _X,
      _Y,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double hypot(
    double _X,
    double _Y,
  ) {
    return _hypot1(
      _X,
      _Y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot1 = _hypotPtr.asFunction<double Function(double, double)>();

  double _hypot(
    double _X,
    double _Y,
  ) {
    return __hypot(
      _X,
      _Y,
    );
  }

  late final __hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_hypot');
  late final __hypot = __hypotPtr.asFunction<double Function(double, double)>();

  int ilogb(
    double _X,
  ) {
    return _ilogb(
      _X,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double ldexp(
    double _X,
    int _Y,
  ) {
    return _ldexp(
      _X,
      _Y,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double lgamma(
    double _X,
  ) {
    return _lgamma(
      _X,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  int llrint(
    double _X,
  ) {
    return _llrint(
      _X,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llround(
    double _X,
  ) {
    return _llround(
      _X,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double log1p(
    double _X,
  ) {
    return _log1p(
      _X,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double log2(
    double _X,
  ) {
    return _log2(
      _X,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double logb(
    double _X,
  ) {
    return _logb(
      _X,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  int lrint(
    double _X,
  ) {
    return _lrint(
      _X,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int lround(
    double _X,
  ) {
    return _lround(
      _X,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int _matherr(
    ffi.Pointer<_exception> _Except,
  ) {
    return __matherr(
      _Except,
    );
  }

  late final __matherrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_exception>)>>(
          '_matherr');
  late final __matherr =
      __matherrPtr.asFunction<int Function(ffi.Pointer<_exception>)>();

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return _modf(
      _X,
      _Y,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double nan(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nan(
      _X,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyint(
    double _X,
  ) {
    return _nearbyint(
      _X,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double nextafter(
    double _X,
    double _Y,
  ) {
    return _nextafter(
      _X,
      _Y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double _X,
    double _Y,
  ) {
    return _remainder(
      _X,
      _Y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquo(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double _X,
  ) {
    return _rint(
      _X,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double round(
    double _X,
  ) {
    return _round(
      _X,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double scalbln(
    double _X,
    int _Y,
  ) {
    return _scalbln(
      _X,
      _Y,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double _X,
    int _Y,
  ) {
    return _scalbn(
      _X,
      _Y,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double tgamma(
    double _X,
  ) {
    return _tgamma(
      _X,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double trunc(
    double _X,
  ) {
    return _trunc(
      _X,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double _j0(
    double _X,
  ) {
    return __j0(
      _X,
    );
  }

  late final __j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j0');
  late final __j0 = __j0Ptr.asFunction<double Function(double)>();

  double _j1(
    double _X,
  ) {
    return __j1(
      _X,
    );
  }

  late final __j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j1');
  late final __j1 = __j1Ptr.asFunction<double Function(double)>();

  double _jn(
    int _X,
    double _Y,
  ) {
    return __jn(
      _X,
      _Y,
    );
  }

  late final __jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_jn');
  late final __jn = __jnPtr.asFunction<double Function(int, double)>();

  double _y0(
    double _X,
  ) {
    return __y0(
      _X,
    );
  }

  late final __y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y0');
  late final __y0 = __y0Ptr.asFunction<double Function(double)>();

  double _y1(
    double _X,
  ) {
    return __y1(
      _X,
    );
  }

  late final __y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y1');
  late final __y1 = __y1Ptr.asFunction<double Function(double)>();

  double _yn(
    int _X,
    double _Y,
  ) {
    return __yn(
      _X,
      _Y,
    );
  }

  late final __ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_yn');
  late final __yn = __ynPtr.asFunction<double Function(int, double)>();

  double acoshf(
    double _X,
  ) {
    return _acoshf(
      _X,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double _X,
  ) {
    return _asinhf(
      _X,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double _X,
  ) {
    return _atanhf(
      _X,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double cbrtf(
    double _X,
  ) {
    return _cbrtf(
      _X,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double _chgsignf(
    double _X,
  ) {
    return __chgsignf(
      _X,
    );
  }

  late final __chgsignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_chgsignf');
  late final __chgsignf = __chgsignfPtr.asFunction<double Function(double)>();

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return _copysignf1(
      _Number,
      _Sign,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf1 =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double _copysignf(
    double _Number,
    double _Sign,
  ) {
    return __copysignf(
      _Number,
      _Sign,
    );
  }

  late final __copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_copysignf');
  late final __copysignf =
      __copysignfPtr.asFunction<double Function(double, double)>();

  double erff(
    double _X,
  ) {
    return _erff(
      _X,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double _X,
  ) {
    return _erfcf(
      _X,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double expm1f(
    double _X,
  ) {
    return _expm1f(
      _X,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double exp2f(
    double _X,
  ) {
    return _exp2f(
      _X,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double fdimf(
    double _X,
    double _Y,
  ) {
    return _fdimf(
      _X,
      _Y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fmaf(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return _fmaxf(
      _X,
      _Y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double _X,
    double _Y,
  ) {
    return _fminf(
      _X,
      _Y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double _hypotf(
    double _X,
    double _Y,
  ) {
    return __hypotf(
      _X,
      _Y,
    );
  }

  late final __hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_hypotf');
  late final __hypotf =
      __hypotfPtr.asFunction<double Function(double, double)>();

  int ilogbf(
    double _X,
  ) {
    return _ilogbf(
      _X,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  double lgammaf(
    double _X,
  ) {
    return _lgammaf(
      _X,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  int llrintf(
    double _X,
  ) {
    return _llrintf(
      _X,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llroundf(
    double _X,
  ) {
    return _llroundf(
      _X,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double log1pf(
    double _X,
  ) {
    return _log1pf(
      _X,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log2f(
    double _X,
  ) {
    return _log2f(
      _X,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double logbf(
    double _X,
  ) {
    return _logbf1(
      _X,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf1 = _logbfPtr.asFunction<double Function(double)>();

  int lrintf(
    double _X,
  ) {
    return _lrintf(
      _X,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double _X,
  ) {
    return _lroundf(
      _X,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  double nanf(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nanf(
      _X,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyintf(
    double _X,
  ) {
    return _nearbyintf(
      _X,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return _nextafterf1(
      _X,
      _Y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf1 =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double _X,
    double _Y,
  ) {
    return _remainderf(
      _X,
      _Y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquof(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double _X,
  ) {
    return _rintf(
      _X,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double roundf(
    double _X,
  ) {
    return _roundf(
      _X,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return _scalblnf(
      _X,
      _Y,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return _scalbnf(
      _X,
      _Y,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double tgammaf(
    double _X,
  ) {
    return _tgammaf(
      _X,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double truncf(
    double _X,
  ) {
    return _truncf(
      _X,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double _logbf(
    double _X,
  ) {
    return __logbf(
      _X,
    );
  }

  late final __logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_logbf');
  late final __logbf = __logbfPtr.asFunction<double Function(double)>();

  double _nextafterf(
    double _X,
    double _Y,
  ) {
    return __nextafterf(
      _X,
      _Y,
    );
  }

  late final __nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_nextafterf');
  late final __nextafterf =
      __nextafterfPtr.asFunction<double Function(double, double)>();

  int _finitef(
    double _X,
  ) {
    return __finitef(
      _X,
    );
  }

  late final __finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_finitef');
  late final __finitef = __finitefPtr.asFunction<int Function(double)>();

  int _isnanf(
    double _X,
  ) {
    return __isnanf(
      _X,
    );
  }

  late final __isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_isnanf');
  late final __isnanf = __isnanfPtr.asFunction<int Function(double)>();

  int _fpclassf(
    double _X,
  ) {
    return __fpclassf(
      _X,
    );
  }

  late final __fpclassfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fpclassf');
  late final __fpclassf = __fpclassfPtr.asFunction<int Function(double)>();

  int _set_FMA3_enable(
    int _Flag,
  ) {
    return __set_FMA3_enable(
      _Flag,
    );
  }

  late final __set_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_FMA3_enable');
  late final __set_FMA3_enable =
      __set_FMA3_enablePtr.asFunction<int Function(int)>();

  int _get_FMA3_enable() {
    return __get_FMA3_enable();
  }

  late final __get_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_get_FMA3_enable');
  late final __get_FMA3_enable =
      __get_FMA3_enablePtr.asFunction<int Function()>();

  double acosf(
    double _X,
  ) {
    return _acosf(
      _X,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double _X,
  ) {
    return _asinf(
      _X,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double atan2f(
    double _Y,
    double _X,
  ) {
    return _atan2f(
      _Y,
      _X,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atanf(
    double _X,
  ) {
    return _atanf(
      _X,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double ceilf(
    double _X,
  ) {
    return _ceilf(
      _X,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double cosf(
    double _X,
  ) {
    return _cosf(
      _X,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double coshf(
    double _X,
  ) {
    return _coshf(
      _X,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double expf(
    double _X,
  ) {
    return _expf(
      _X,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double floorf(
    double _X,
  ) {
    return _floorf(
      _X,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double _X,
    double _Y,
  ) {
    return _fmodf(
      _X,
      _Y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double log10f(
    double _X,
  ) {
    return _log10f(
      _X,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double logf(
    double _X,
  ) {
    return _logf(
      _X,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return _modff(
      _X,
      _Y,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double powf(
    double _X,
    double _Y,
  ) {
    return _powf(
      _X,
      _Y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double sinf(
    double _X,
  ) {
    return _sinf(
      _X,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sinhf(
    double _X,
  ) {
    return _sinhf(
      _X,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sqrtf(
    double _X,
  ) {
    return _sqrtf(
      _X,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double tanf(
    double _X,
  ) {
    return _tanf(
      _X,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tanhf(
    double _X,
  ) {
    return _tanhf(
      _X,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  late final ffi.Pointer<ffi.Double> _HUGE1 = _lookup<ffi.Double>('HUGE');

  double get HUGE => _HUGE1.value;

  set HUGE(double value) => _HUGE1.value = value;

  double j0(
    double _X,
  ) {
    return _j01(
      _X,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j01 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double _X,
  ) {
    return _j11(
      _X,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j11 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int _X,
    double _Y,
  ) {
    return _jn1(
      _X,
      _Y,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn1 = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double _X,
  ) {
    return _y01(
      _X,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y01 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double _X,
  ) {
    return _y11(
      _X,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y11 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int _X,
    double _Y,
  ) {
    return _yn1(
      _X,
      _Y,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn1 = _ynPtr.asFunction<double Function(int, double)>();

  ffi.Pointer<ffi.Void> _calloc_base(
    int _Count,
    int _Size,
  ) {
    return __calloc_base(
      _Count,
      _Size,
    );
  }

  late final __calloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('_calloc_base');
  late final __calloc_base =
      __calloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> calloc(
    int _Count,
    int _Size,
  ) {
    return _calloc(
      _Count,
      _Size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int _callnewh(
    int _Size,
  ) {
    return __callnewh(
      _Size,
    );
  }

  late final __callnewhPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size)>>('_callnewh');
  late final __callnewh = __callnewhPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> _expand(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __expand(
      _Block,
      _Size,
    );
  }

  late final __expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_expand');
  late final __expand = __expandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void _free_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __free_base(
      _Block,
    );
  }

  late final __free_basePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_free_base');
  late final __free_base =
      __free_basePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _free(
      _Block,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _malloc_base(
    int _Size,
  ) {
    return __malloc_base(
      _Size,
    );
  }

  late final __malloc_basePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          '_malloc_base');
  late final __malloc_base =
      __malloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int _Size,
  ) {
    return _malloc(
      _Size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int _msize_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize_base(
      _Block,
    );
  }

  late final __msize_basePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize_base');
  late final __msize_base =
      __msize_basePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int _msize(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize(
      _Block,
    );
  }

  late final __msizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize');
  late final __msize =
      __msizePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _realloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __realloc_base(
      _Block,
      _Size,
    );
  }

  late final __realloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_realloc_base');
  late final __realloc_base = __realloc_basePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _realloc(
      _Block,
      _Size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> _recalloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc_base(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recalloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc_base');
  late final __recalloc_base = __recalloc_basePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc');
  late final __recalloc = __recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void _aligned_free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __aligned_free(
      _Block,
    );
  }

  late final __aligned_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_aligned_free');
  late final __aligned_free =
      __aligned_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _aligned_malloc(
    int _Size,
    int _Alignment,
  ) {
    return __aligned_malloc(
      _Size,
      _Alignment,
    );
  }

  late final __aligned_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size)>>('_aligned_malloc');
  late final __aligned_malloc = __aligned_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_malloc(
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_malloc(
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_malloc');
  late final __aligned_offset_malloc = __aligned_offset_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int _aligned_msize(
    ffi.Pointer<ffi.Void> _Block,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_msize(
      _Block,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_msizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_msize');
  late final __aligned_msize = __aligned_msizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_realloc(
      _Block,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_offset_realloc');
  late final __aligned_offset_realloc = __aligned_offset_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_recalloc');
  late final __aligned_offset_recalloc =
      __aligned_offset_recallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_realloc(
      _Block,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_realloc');
  late final __aligned_realloc = __aligned_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_recalloc');
  late final __aligned_recalloc = __aligned_recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno = __errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> bsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _bsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _bsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('bsearch_s');
  late final _bsearch_s = _bsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  void qsort_s(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _qsort_s(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _qsort_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('qsort_s');
  late final _qsort_s = _qsort_sPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtSecureSearchSortCompareFunction, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _bsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  void qsort(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _qsort(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lfind_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lfind_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lfind_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lfind_s');
  late final __lfind_s = __lfind_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lfind(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lfind');
  late final __lfind = __lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lsearch_s');
  late final __lsearch_s = __lsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lsearch');
  late final __lsearch = __lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lfind1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lfind');
  late final _lfind1 = _lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lsearch1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lsearch');
  late final _lsearch1 = _lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  int _itow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_itow_s');
  late final __itow_s = __itow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _itow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __itow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_itow');
  late final __itow = __itowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ltow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_ltow_s');
  late final __ltow_s = __ltow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ltow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ltow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ltow');
  late final __ltow = __ltowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ultow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_ultow_s');
  late final __ultow_s = __ultow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ultow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ultow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ultow');
  late final __ultow = __ultowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  double wcstod(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstod(
      _String,
      _EndPtr,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstod_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstod_l');
  late final __wcstod_l = __wcstod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  int wcstol(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstol_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstol_l');
  late final __wcstol_l = __wcstol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoll(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoll_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoll_l');
  late final __wcstoll_l = __wcstoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoul(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoul_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoul_l');
  late final __wcstoul_l = __wcstoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoull(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoull_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoull_l');
  late final __wcstoull_l = __wcstoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  double wcstof(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstof(
      _String,
      _EndPtr,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstof_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstof_l');
  late final __wcstof_l = __wcstof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  double _wtof(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtof(
      _String,
    );
  }

  late final __wtofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtof');
  late final __wtof =
      __wtofPtr.asFunction<double Function(ffi.Pointer<ffi.WChar>)>();

  double _wtof_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtof_l(
      _String,
      _Locale,
    );
  }

  late final __wtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtof_l');
  late final __wtof_l = __wtof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoi(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi(
      _String,
    );
  }

  late final __wtoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtoi');
  late final __wtoi =
      __wtoiPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi_l');
  late final __wtoi_l =
      __wtoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtol(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtol(
      _String,
    );
  }

  late final __wtolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtol');
  late final __wtol =
      __wtolPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtol_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtol_l(
      _String,
      _Locale,
    );
  }

  late final __wtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtol_l');
  late final __wtol_l =
      __wtol_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoll(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoll(
      _String,
    );
  }

  late final __wtollPtr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoll');
  late final __wtoll =
      __wtollPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoll_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoll_l(
      _String,
      _Locale,
    );
  }

  late final __wtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoll_l');
  late final __wtoll_l = __wtoll_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _i64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_i64tow_s');
  late final __i64tow_s = __i64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _i64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __i64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_i64tow');
  late final __i64tow = __i64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ui64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Int)>>('_ui64tow_s');
  late final __ui64tow_s = __ui64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ui64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ui64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ui64tow');
  late final __ui64tow = __ui64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _wtoi64(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi64(
      _String,
    );
  }

  late final __wtoi64Ptr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoi64');
  late final __wtoi64 =
      __wtoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi64_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi64_l');
  late final __wtoi64_l = __wtoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcstoi64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoi64');
  late final __wcstoi64 = __wcstoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoi64_l');
  late final __wcstoi64_l = __wcstoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int _wcstoui64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoui64');
  late final __wcstoui64 = __wcstoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoui64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoui64_l');
  late final __wcstoui64_l = __wcstoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wfullpath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Path,
    int _BufferCount,
  ) {
    return __wfullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __wfullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wfullpath');
  late final __wfullpath = __wfullpathPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wmakepath_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath_s');
  late final __wmakepath_s = __wmakepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wmakepath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath');
  late final __wmakepath = __wmakepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wperror(
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  void _wsplitpath(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wsplitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wsplitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsplitpath');
  late final __wsplitpath = __wsplitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsplitpath_s(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.WChar> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.WChar> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.WChar> _Ext,
    int _ExtCount,
  ) {
    return __wsplitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __wsplitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('_wsplitpath_s');
  late final __wsplitpath_s = __wsplitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int)>();

  int _wdupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wdupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wdupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>)>>('_wdupenv_s');
  late final __wdupenv_s = __wdupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> _wgetenv(
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv(
      _VarName,
    );
  }

  late final __wgetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wgetenv');
  late final __wgetenv = __wgetenvPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wgetenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wgetenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.WChar>)>>('_wgetenv_s');
  late final __wgetenv_s = __wgetenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.WChar>)>();

  int _wputenv(
    ffi.Pointer<ffi.WChar> _EnvString,
  ) {
    return __wputenv(
      _EnvString,
    );
  }

  late final __wputenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wputenv');
  late final __wputenv =
      __wputenvPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wputenv_s(
    ffi.Pointer<ffi.WChar> _Name,
    ffi.Pointer<ffi.WChar> _Value,
  ) {
    return __wputenv_s(
      _Name,
      _Value,
    );
  }

  late final __wputenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wputenv_s');
  late final __wputenv_s = __wputenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wsearchenv_s(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wsearchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __wsearchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wsearchenv_s');
  late final __wsearchenv_s = __wsearchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int)>();

  void _wsearchenv(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _ResultPath,
  ) {
    return __wsearchenv(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  late final __wsearchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsearchenv');
  late final __wsearchenv = __wsearchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsystem(
    ffi.Pointer<ffi.WChar> _Command,
  ) {
    return __wsystem(
      _Command,
    );
  }

  late final __wsystemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wsystem');
  late final __wsystem =
      __wsystemPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  void _swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return __swab(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final __swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('_swab');
  late final __swab = __swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void exit(
    int _Code,
  ) {
    return _exit1(
      _Code,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void _exit(
    int _Code,
  ) {
    return __exit(
      _Code,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int _Code,
  ) {
    return __Exit(
      _Code,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int _Code,
  ) {
    return _quick_exit(
      _Code,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int _set_abort_behavior(
    int _Flags,
    int _Mask,
  ) {
    return __set_abort_behavior(
      _Flags,
      _Mask,
    );
  }

  late final __set_abort_behaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('_set_abort_behavior');
  late final __set_abort_behavior =
      __set_abort_behaviorPtr.asFunction<int Function(int, int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _onexit_t _onexit(
    _onexit_t _Func,
  ) {
    return __onexit(
      _Func,
    );
  }

  late final __onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('_onexit');
  late final __onexit = __onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _purecall_handler _set_purecall_handler(
    _purecall_handler _Handler,
  ) {
    return __set_purecall_handler(
      _Handler,
    );
  }

  late final __set_purecall_handlerPtr = _lookup<
          ffi.NativeFunction<_purecall_handler Function(_purecall_handler)>>(
      '_set_purecall_handler');
  late final __set_purecall_handler = __set_purecall_handlerPtr
      .asFunction<_purecall_handler Function(_purecall_handler)>();

  _purecall_handler _get_purecall_handler() {
    return __get_purecall_handler();
  }

  late final __get_purecall_handlerPtr =
      _lookup<ffi.NativeFunction<_purecall_handler Function()>>(
          '_get_purecall_handler');
  late final __get_purecall_handler =
      __get_purecall_handlerPtr.asFunction<_purecall_handler Function()>();

  _invalid_parameter_handler _set_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_invalid_parameter_handlerPtr = _lookup<
      ffi.NativeFunction<
          _invalid_parameter_handler Function(
              _invalid_parameter_handler)>>('_set_invalid_parameter_handler');
  late final __set_invalid_parameter_handler =
      __set_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_invalid_parameter_handler() {
    return __get_invalid_parameter_handler();
  }

  late final __get_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_invalid_parameter_handler');
  late final __get_invalid_parameter_handler =
      __get_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_thread_local_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_thread_local_invalid_parameter_handlerPtr = _lookup<
          ffi.NativeFunction<
              _invalid_parameter_handler Function(_invalid_parameter_handler)>>(
      '_set_thread_local_invalid_parameter_handler');
  late final __set_thread_local_invalid_parameter_handler =
      __set_thread_local_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_thread_local_invalid_parameter_handler() {
    return __get_thread_local_invalid_parameter_handler();
  }

  late final __get_thread_local_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_thread_local_invalid_parameter_handler');
  late final __get_thread_local_invalid_parameter_handler =
      __get_thread_local_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  int _set_error_mode(
    int _Mode,
  ) {
    return __set_error_mode(
      _Mode,
    );
  }

  late final __set_error_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_set_error_mode');
  late final __set_error_mode =
      __set_error_modePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.UnsignedLong> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedLong> Function()>>(
          '__doserrno');
  late final ___doserrno =
      ___doserrnoPtr.asFunction<ffi.Pointer<ffi.UnsignedLong> Function()>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.UnsignedLong)>>(
          '_set_doserrno');
  late final __set_doserrno = __set_doserrnoPtr.asFunction<int Function(int)>();

  int _get_doserrno(
    ffi.Pointer<ffi.UnsignedLong> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrnoPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.UnsignedLong>)>>(
      '_get_doserrno');
  late final __get_doserrno = __get_doserrnoPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedLong>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __sys_errlist() {
    return ___sys_errlist();
  }

  late final ___sys_errlistPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__sys_errlist');
  late final ___sys_errlist = ___sys_errlistPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Int> __sys_nerr() {
    return ___sys_nerr();
  }

  late final ___sys_nerrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__sys_nerr');
  late final ___sys_nerr =
      ___sys_nerrPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  void perror(
    ffi.Pointer<ffi.Char> _ErrMsg,
  ) {
    return _perror(
      _ErrMsg,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __p__pgmptr() {
    return ___p__pgmptr();
  }

  late final ___p__pgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__p__pgmptr');
  late final ___p__pgmptr = ___p__pgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.WChar>> __p__wpgmptr() {
    return ___p__wpgmptr();
  }

  late final ___p__wpgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>>(
      '__p__wpgmptr');
  late final ___p__wpgmptr = ___p__wpgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>();

  ffi.Pointer<ffi.Int> __p__fmode() {
    return ___p__fmode();
  }

  late final ___p__fmodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p__fmode');
  late final ___p__fmode =
      ___p__fmodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _get_pgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Value,
  ) {
    return __get_pgmptr(
      _Value,
    );
  }

  late final __get_pgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('_get_pgmptr');
  late final __get_pgmptr = __get_pgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int _get_wpgmptr(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Value,
  ) {
    return __get_wpgmptr(
      _Value,
    );
  }

  late final __get_wpgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('_get_wpgmptr');
  late final __get_wpgmptr = __get_wpgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  int _set_fmode(
    int _Mode,
  ) {
    return __set_fmode(
      _Mode,
    );
  }

  late final __set_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_fmode');
  late final __set_fmode = __set_fmodePtr.asFunction<int Function(int)>();

  int _get_fmode(
    ffi.Pointer<ffi.Int> _PMode,
  ) {
    return __get_fmode(
      _PMode,
    );
  }

  late final __get_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_fmode');
  late final __get_fmode =
      __get_fmodePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int _abs64(
    int _Number,
  ) {
    return __abs64(
      _Number,
    );
  }

  late final __abs64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>(
          '_abs64');
  late final __abs64 = __abs64Ptr.asFunction<int Function(int)>();

  int _byteswap_ushort(
    int _Number,
  ) {
    return __byteswap_ushort(
      _Number,
    );
  }

  late final __byteswap_ushortPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedShort Function(ffi.UnsignedShort)>>(
      '_byteswap_ushort');
  late final __byteswap_ushort =
      __byteswap_ushortPtr.asFunction<int Function(int)>();

  int _byteswap_ulong(
    int _Number,
  ) {
    return __byteswap_ulong(
      _Number,
    );
  }

  late final __byteswap_ulongPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.UnsignedLong)>>(
          '_byteswap_ulong');
  late final __byteswap_ulong =
      __byteswap_ulongPtr.asFunction<int Function(int)>();

  int _byteswap_uint64(
    int _Number,
  ) {
    return __byteswap_uint64(
      _Number,
    );
  }

  late final __byteswap_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong)>>('_byteswap_uint64');
  late final __byteswap_uint64 =
      __byteswap_uint64Ptr.asFunction<int Function(int)>();

  div_t div(
    int _Numerator,
    int _Denominator,
  ) {
    return _div(
      _Numerator,
      _Denominator,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _ldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _lldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int _rotl(
    int _Value,
    int _Shift,
  ) {
    return __rotl(
      _Value,
      _Shift,
    );
  }

  late final __rotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotl');
  late final __rotl = __rotlPtr.asFunction<int Function(int, int)>();

  int _lrotl(
    int _Value,
    int _Shift,
  ) {
    return __lrotl(
      _Value,
      _Shift,
    );
  }

  late final __lrotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotl');
  late final __lrotl = __lrotlPtr.asFunction<int Function(int, int)>();

  int _rotl64(
    int _Value,
    int _Shift,
  ) {
    return __rotl64(
      _Value,
      _Shift,
    );
  }

  late final __rotl64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotl64');
  late final __rotl64 = __rotl64Ptr.asFunction<int Function(int, int)>();

  int _rotr(
    int _Value,
    int _Shift,
  ) {
    return __rotr(
      _Value,
      _Shift,
    );
  }

  late final __rotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotr');
  late final __rotr = __rotrPtr.asFunction<int Function(int, int)>();

  int _lrotr(
    int _Value,
    int _Shift,
  ) {
    return __lrotr(
      _Value,
      _Shift,
    );
  }

  late final __lrotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotr');
  late final __lrotr = __lrotrPtr.asFunction<int Function(int, int)>();

  int _rotr64(
    int _Value,
    int _Shift,
  ) {
    return __rotr64(
      _Value,
      _Shift,
    );
  }

  late final __rotr64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotr64');
  late final __rotr64 = __rotr64Ptr.asFunction<int Function(int, int)>();

  void srand(
    int _Seed,
  ) {
    return _srand(
      _Seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  int atoi(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoi(
      _String,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atol(
      _String,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoll(
      _String,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _atoi64(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoi64(
      _String,
    );
  }

  late final __atoi64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          '_atoi64');
  late final __atoi64 =
      __atoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _atoi_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi_l(
      _String,
      _Locale,
    );
  }

  late final __atoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi_l');
  late final __atoi_l =
      __atoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atol_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atol_l(
      _String,
      _Locale,
    );
  }

  late final __atol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atol_l');
  late final __atol_l =
      __atol_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoll_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoll_l(
      _String,
      _Locale,
    );
  }

  late final __atoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoll_l');
  late final __atoll_l =
      __atoll_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoi64_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi64_l(
      _String,
      _Locale,
    );
  }

  late final __atoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi64_l');
  late final __atoi64_l = __atoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoflt(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoflt(
      _Result,
      _String,
    );
  }

  late final __atofltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>>('_atoflt');
  late final __atoflt = __atofltPtr.asFunction<
      int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>();

  int _atodbl(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atodbl(
      _Result,
      _String,
    );
  }

  late final __atodblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>>('_atodbl');
  late final __atodbl = __atodblPtr.asFunction<
      int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoldbl(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoldbl(
      _Result,
      _String,
    );
  }

  late final __atoldblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>>('_atoldbl');
  late final __atoldbl = __atoldblPtr
      .asFunction<int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoflt_l(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoflt_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoflt_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoflt_l');
  late final __atoflt_l = __atoflt_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atodbl_l(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atodbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atodbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atodbl_l');
  late final __atodbl_l = __atodbl_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoldbl_l(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoldbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoldbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoldbl_l');
  late final __atoldbl_l = __atoldbl_lPtr.asFunction<
      int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  double strtof(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtof(
      _String,
      _EndPtr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtof_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtof_l');
  late final __strtof_l = __strtof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  double strtod(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtod(
      _String,
      _EndPtr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtod_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtod_l');
  late final __strtod_l = __strtod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  int strtol(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtol_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtol_l');
  late final __strtol_l = __strtol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoll(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoll_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoll_l');
  late final __strtoll_l = __strtoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoul(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoul_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoul_l');
  late final __strtoul_l = __strtoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoull(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoull_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoull_l');
  late final __strtoull_l = __strtoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoi64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoi64');
  late final __strtoi64 = __strtoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoi64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoi64_l');
  late final __strtoi64_l = __strtoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoui64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoui64');
  late final __strtoui64 = __strtoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoui64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoui64_l');
  late final __strtoui64_l = __strtoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _itoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_itoa_s');
  late final __itoa_s = __itoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __itoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('_itoa');
  late final __itoa = __itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ltoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_ltoa_s');
  late final __ltoa_s = __ltoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ltoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ltoa');
  late final __ltoa = __ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ultoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_ultoa_s');
  late final __ultoa_s = __ultoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ultoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ultoa');
  late final __ultoa = __ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _i64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_i64toa_s');
  late final __i64toa_s = __i64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _i64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __i64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_i64toa');
  late final __i64toa = __i64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ui64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Int)>>('_ui64toa_s');
  late final __ui64toa_s = __ui64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ui64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ui64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_ui64toa');
  late final __ui64toa = __ui64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ecvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt_s');
  late final __ecvt_s = __ecvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt');
  late final __ecvt = __ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _fcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt_s');
  late final __fcvt_s = __fcvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt');
  late final __fcvt = __fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _gcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
  ) {
    return __gcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
    );
  }

  late final __gcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double,
              ffi.Int)>>('_gcvt_s');
  late final __gcvt_s = __gcvt_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, double, int)>();

  ffi.Pointer<ffi.Char> _gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __gcvt(
      _Value,
      _DigitCount,
      _Buffer,
    );
  }

  late final __gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('_gcvt');
  late final __gcvt = __gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ___mb_cur_max_func() {
    return ____mb_cur_max_func();
  }

  late final ____mb_cur_max_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('___mb_cur_max_func');
  late final ____mb_cur_max_func =
      ____mb_cur_max_funcPtr.asFunction<int Function()>();

  int ___mb_cur_max_l_func(
    _locale_t _Locale,
  ) {
    return ____mb_cur_max_l_func(
      _Locale,
    );
  }

  late final ____mb_cur_max_l_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(_locale_t)>>(
          '___mb_cur_max_l_func');
  late final ____mb_cur_max_l_func =
      ____mb_cur_max_l_funcPtr.asFunction<int Function(_locale_t)>();

  int mblen(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
  ) {
    return _mblen(
      _Ch,
      _MaxCount,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mblen_l(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mblen_l(
      _Ch,
      _MaxCount,
      _Locale,
    );
  }

  late final __mblen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mblen_l');
  late final __mblen_l = __mblen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstrlen(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __mbstrlen(
      _String,
    );
  }

  late final __mbstrlenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>)>>(
          '_mbstrlen');
  late final __mbstrlen =
      __mbstrlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _mbstrlen_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __mbstrlen_l(
      _String,
      _Locale,
    );
  }

  late final __mbstrlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_mbstrlen_l');
  late final __mbstrlen_l = __mbstrlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _mbstrnlen(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
  ) {
    return __mbstrnlen(
      _String,
      _MaxCount,
    );
  }

  late final __mbstrnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_mbstrnlen');
  late final __mbstrnlen =
      __mbstrnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mbstrnlen_l(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstrnlen_l(
      _String,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstrnlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mbstrnlen_l');
  late final __mbstrnlen_l = __mbstrnlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
  ) {
    return _mbtowc(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbtowc_l(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
    _locale_t _Locale,
  ) {
    return __mbtowc_l(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
      _Locale,
    );
  }

  late final __mbtowc_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbtowc_l');
  late final __mbtowc_l = __mbtowc_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbstowcs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
  ) {
    return _mbstowcs_s(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
    );
  }

  late final _mbstowcs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Size)>>('mbstowcs_s');
  late final _mbstowcs_s = _mbstowcs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
  ) {
    return _mbstowcs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbstowcs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_s_l(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              _locale_t)>>('_mbstowcs_s_l');
  late final __mbstowcs_s_l = __mbstowcs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstowcs_l(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbstowcs_l');
  late final __mbstowcs_l = __mbstowcs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
  ) {
    return _wctomb(
      _MbCh,
      _WCh,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _wctomb_l(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_l(
      _MbCh,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.WChar, _locale_t)>>('_wctomb_l');
  late final __wctomb_l = __wctomb_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb_s(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
  ) {
    return _wctomb_s(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
    );
  }

  late final _wctomb_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, rsize_t,
              ffi.WChar)>>('wctomb_s');
  late final _wctomb_s = _wctomb_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int)>();

  int _wctomb_s_l(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_s_l(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.WChar, _locale_t)>>('_wctomb_s_l');
  late final __wctomb_s_l = __wctomb_s_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int, _locale_t)>();

  int wcstombs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
  ) {
    return _wcstombs_s(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
    );
  }

  late final _wcstombs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcstombs_s');
  late final _wcstombs_s = _wcstombs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcstombs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcstombs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
    _locale_t _Locale,
  ) {
    return __wcstombs_s_l(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
      _Locale,
    );
  }

  late final __wcstombs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              _locale_t)>>('_wcstombs_s_l');
  late final __wcstombs_s_l = __wcstombs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  int _wcstombs_l(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcstombs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcstombs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcstombs_l');
  late final __wcstombs_l = __wcstombs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  ffi.Pointer<ffi.Char> _fullpath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Path,
    int _BufferCount,
  ) {
    return __fullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __fullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_fullpath');
  late final __fullpath = __fullpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _makepath_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath_s');
  late final __makepath_s = __makepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _makepath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath');
  late final __makepath = __makepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _splitpath(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __splitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __splitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_splitpath');
  late final __splitpath = __splitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int _splitpath_s(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Char> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Char> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Char> _Ext,
    int _ExtCount,
  ) {
    return __splitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __splitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('_splitpath_s');
  late final __splitpath_s = __splitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int)>();

  int getenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _getenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              rsize_t, ffi.Pointer<ffi.Char>)>>('getenv_s');
  late final _getenv_s = _getenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> __p___argc() {
    return ___p___argc();
  }

  late final ___p___argcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p___argc');
  late final ___p___argc =
      ___p___argcPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p___argv() {
    return ___p___argv();
  }

  late final ___p___argvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p___argv');
  late final ___p___argv = ___p___argvPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p___wargv() {
    return ___p___wargv();
  }

  late final ___p___wargvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p___wargv');
  late final ___p___wargv = ___p___wargvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p__environ() {
    return ___p__environ();
  }

  late final ___p__environPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p__environ');
  late final ___p__environ = ___p__environPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p__wenviron() {
    return ___p__wenviron();
  }

  late final ___p__wenvironPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p__wenviron');
  late final ___p__wenviron = ___p__wenvironPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv(
      _VarName,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _dupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return __dupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __dupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>>('_dupenv_s');
  late final __dupenv_s = __dupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> _Command,
  ) {
    return _system(
      _Command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return __putenv(
      _EnvString,
    );
  }

  late final __putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          '_putenv');
  late final __putenv =
      __putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv_s(
    ffi.Pointer<ffi.Char> _Name,
    ffi.Pointer<ffi.Char> _Value,
  ) {
    return __putenv_s(
      _Name,
      _Value,
    );
  }

  late final __putenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_putenv_s');
  late final __putenv_s = __putenv_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _searchenv_s(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
  ) {
    return __searchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __searchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_searchenv_s');
  late final __searchenv_s = __searchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  void _searchenv(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __searchenv(
      _Filename,
      _VarName,
      _Buffer,
    );
  }

  late final __searchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_searchenv');
  late final __searchenv = __searchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _seterrormode(
    int _Mode,
  ) {
    return __seterrormode(
      _Mode,
    );
  }

  late final __seterrormodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_seterrormode');
  late final __seterrormode =
      __seterrormodePtr.asFunction<void Function(int)>();

  void _beep(
    int _Frequency,
    int _Duration,
  ) {
    return __beep(
      _Frequency,
      _Duration,
    );
  }

  late final __beepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('_beep');
  late final __beep = __beepPtr.asFunction<void Function(int, int)>();

  void _sleep(
    int _Duration,
  ) {
    return __sleep(
      _Duration,
    );
  }

  late final __sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          '_sleep');
  late final __sleep = __sleepPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _ecvt1(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt1 = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _fcvt1(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt1 = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _DstBuf,
  ) {
    return _gcvt1(
      _Value,
      _DigitCount,
      _DstBuf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt1 = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _itoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('itoa');
  late final _itoa1 = _itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ltoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('ltoa');
  late final _ltoa1 = _ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  void swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return _swab1(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('swab');
  late final _swab1 = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ultoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('ultoa');
  late final _ultoa1 = _ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return _putenv1(
      _EnvString,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv1 =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  _onexit_t onexit(
    _onexit_t _Func,
  ) {
    return _onexit1(
      _Func,
    );
  }

  late final _onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('onexit');
  late final _onexit1 = _onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  double mydsp_faustpower2_f(
    double value,
  ) {
    return _mydsp_faustpower2_f(
      value,
    );
  }

  late final _mydsp_faustpower2_fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>(
          'mydsp_faustpower2_f');
  late final _mydsp_faustpower2_f =
      _mydsp_faustpower2_fPtr.asFunction<double Function(double)>();

  ffi.Pointer<mydsp> newmydsp() {
    return _newmydsp();
  }

  late final _newmydspPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<mydsp> Function()>>('newmydsp');
  late final _newmydsp =
      _newmydspPtr.asFunction<ffi.Pointer<mydsp> Function()>();

  void deletemydsp(
    ffi.Pointer<mydsp> dsp,
  ) {
    return _deletemydsp(
      dsp,
    );
  }

  late final _deletemydspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mydsp>)>>(
          'deletemydsp');
  late final _deletemydsp =
      _deletemydspPtr.asFunction<void Function(ffi.Pointer<mydsp>)>();

  void metadatamydsp(
    ffi.Pointer<MetaGlue> m,
  ) {
    return _metadatamydsp(
      m,
    );
  }

  late final _metadatamydspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MetaGlue>)>>(
          'metadatamydsp');
  late final _metadatamydsp =
      _metadatamydspPtr.asFunction<void Function(ffi.Pointer<MetaGlue>)>();

  int getSampleRatemydsp(
    ffi.Pointer<mydsp> dsp,
  ) {
    return _getSampleRatemydsp(
      dsp,
    );
  }

  late final _getSampleRatemydspPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mydsp>)>>(
          'getSampleRatemydsp');
  late final _getSampleRatemydsp =
      _getSampleRatemydspPtr.asFunction<int Function(ffi.Pointer<mydsp>)>();

  int getNumInputsmydsp(
    ffi.Pointer<mydsp> dsp,
  ) {
    return _getNumInputsmydsp(
      dsp,
    );
  }

  late final _getNumInputsmydspPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mydsp>)>>(
          'getNumInputsmydsp');
  late final _getNumInputsmydsp =
      _getNumInputsmydspPtr.asFunction<int Function(ffi.Pointer<mydsp>)>();

  int getNumOutputsmydsp(
    ffi.Pointer<mydsp> dsp,
  ) {
    return _getNumOutputsmydsp(
      dsp,
    );
  }

  late final _getNumOutputsmydspPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<mydsp>)>>(
          'getNumOutputsmydsp');
  late final _getNumOutputsmydsp =
      _getNumOutputsmydspPtr.asFunction<int Function(ffi.Pointer<mydsp>)>();

  void classInitmydsp(
    int sample_rate,
  ) {
    return _classInitmydsp(
      sample_rate,
    );
  }

  late final _classInitmydspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('classInitmydsp');
  late final _classInitmydsp =
      _classInitmydspPtr.asFunction<void Function(int)>();

  void instanceResetUserInterfacemydsp(
    ffi.Pointer<mydsp> dsp,
  ) {
    return _instanceResetUserInterfacemydsp(
      dsp,
    );
  }

  late final _instanceResetUserInterfacemydspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mydsp>)>>(
          'instanceResetUserInterfacemydsp');
  late final _instanceResetUserInterfacemydsp =
      _instanceResetUserInterfacemydspPtr
          .asFunction<void Function(ffi.Pointer<mydsp>)>();

  void instanceClearmydsp(
    ffi.Pointer<mydsp> dsp,
  ) {
    return _instanceClearmydsp(
      dsp,
    );
  }

  late final _instanceClearmydspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mydsp>)>>(
          'instanceClearmydsp');
  late final _instanceClearmydsp =
      _instanceClearmydspPtr.asFunction<void Function(ffi.Pointer<mydsp>)>();

  void instanceConstantsmydsp(
    ffi.Pointer<mydsp> dsp,
    int sample_rate,
  ) {
    return _instanceConstantsmydsp(
      dsp,
      sample_rate,
    );
  }

  late final _instanceConstantsmydspPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mydsp>, ffi.Int)>>(
      'instanceConstantsmydsp');
  late final _instanceConstantsmydsp = _instanceConstantsmydspPtr
      .asFunction<void Function(ffi.Pointer<mydsp>, int)>();

  void instanceInitmydsp(
    ffi.Pointer<mydsp> dsp,
    int sample_rate,
  ) {
    return _instanceInitmydsp(
      dsp,
      sample_rate,
    );
  }

  late final _instanceInitmydspPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mydsp>, ffi.Int)>>(
      'instanceInitmydsp');
  late final _instanceInitmydsp = _instanceInitmydspPtr
      .asFunction<void Function(ffi.Pointer<mydsp>, int)>();

  void initmydsp(
    ffi.Pointer<mydsp> dsp,
    int sample_rate,
  ) {
    return _initmydsp(
      dsp,
      sample_rate,
    );
  }


  // Start here
  late final _initmydspPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<mydsp>, ffi.Int)>>(
      'initmydsp');
  late final _initmydsp =
      _initmydspPtr.asFunction<void Function(ffi.Pointer<mydsp>, int)>();

  void buildUserInterfacemydsp(
    ffi.Pointer<mydsp> dsp,
    ffi.Pointer<UIGlue> ui_interface,
  ) {
    return _buildUserInterfacemydsp(
      dsp,
      ui_interface,
    );
  }

  late final _buildUserInterfacemydspPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<mydsp>,
              ffi.Pointer<UIGlue>)>>('buildUserInterfacemydsp');
  late final _buildUserInterfacemydsp = _buildUserInterfacemydspPtr
      .asFunction<void Function(ffi.Pointer<mydsp>, ffi.Pointer<UIGlue>)>();

  void computemydsp(
    ffi.Pointer<mydsp> dsp,
    int count,
    ffi.Pointer<ffi.Pointer<ffi.Float>> inputs,
    ffi.Pointer<ffi.Pointer<ffi.Float>> outputs,
  ) {
    return _computemydsp(
      dsp,
      count,
      inputs,
      outputs,
    );
  }

  late final _computemydspPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<mydsp>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Float>>,
              ffi.Pointer<ffi.Pointer<ffi.Float>>)>>('computemydsp');
  late final _computemydsp = _computemydspPtr.asFunction<
      void Function(
          ffi.Pointer<mydsp>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Float>>,
          ffi.Pointer<ffi.Pointer<ffi.Float>>)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

class _exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class _complex extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class _double_val extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Double()
  external double _Val;
}

class _float_val extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Float()
  external double _Val;
}

class _ldouble_val extends ffi.Opaque {}

class _float_const extends ffi.Opaque {}

typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef errno_t = ffi.Int;
typedef rsize_t = ffi.Size;
typedef _CoreCrtSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef _CoreCrtNonSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef _onexit_t = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef _purecall_handler
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef _invalid_parameter_handler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
            ffi.Pointer<ffi.WChar>, ffi.UnsignedInt, ffi.UintPtr)>>;

class _div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class _ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class _lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef div_t = _div_t;
typedef ldiv_t = _ldiv_t;
typedef lldiv_t = _lldiv_t;

class _LDOUBLE extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.UnsignedChar> ld;
}

class _CRT_DOUBLE extends ffi.Struct {
  @ffi.Double()
  external double x;
}

class _CRT_FLOAT extends ffi.Struct {
  @ffi.Float()
  external double f;
}

class _LONGDOUBLE extends ffi.Opaque {}

class _LDBL12 extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.UnsignedChar> ld12;
}

class Soundfile extends ffi.Opaque {}

class UIGlue extends ffi.Struct {
  external ffi.Pointer<ffi.Void> uiInterface;

  external openTabBoxFun openTabBox;

  external openHorizontalBoxFun openHorizontalBox;

  external openVerticalBoxFun openVerticalBox;

  external closeBoxFun closeBox;

  external addButtonFun addButton;

  external addCheckButtonFun addCheckButton;

  external addVerticalSliderFun addVerticalSlider;

  external addHorizontalSliderFun addHorizontalSlider;

  external addNumEntryFun addNumEntry;

  external addHorizontalBargraphFun addHorizontalBargraph;

  external addVerticalBargraphFun addVerticalBargraph;

  external addSoundFileFun addSoundFile;

  external declareFun declare;
}

/// UI and Meta classes for C or LLVM generated code.
typedef openTabBoxFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface, ffi.Pointer<ffi.Char> label)>>;
typedef openHorizontalBoxFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface, ffi.Pointer<ffi.Char> label)>>;
typedef openVerticalBoxFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface, ffi.Pointer<ffi.Char> label)>>;
typedef closeBoxFun = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ui_interface)>>;
typedef addButtonFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label, ffi.Pointer<ffi.Float> zone)>>;
typedef addCheckButtonFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label, ffi.Pointer<ffi.Float> zone)>>;
typedef addVerticalSliderFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label,
            ffi.Pointer<ffi.Float> zone,
            ffi.Float init,
            ffi.Float min,
            ffi.Float max,
            ffi.Float step)>>;
typedef addHorizontalSliderFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label,
            ffi.Pointer<ffi.Float> zone,
            ffi.Float init,
            ffi.Float min,
            ffi.Float max,
            ffi.Float step)>>;
typedef addNumEntryFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label,
            ffi.Pointer<ffi.Float> zone,
            ffi.Float init,
            ffi.Float min,
            ffi.Float max,
            ffi.Float step)>>;
typedef addHorizontalBargraphFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label,
            ffi.Pointer<ffi.Float> zone,
            ffi.Float min,
            ffi.Float max)>>;
typedef addVerticalBargraphFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label,
            ffi.Pointer<ffi.Float> zone,
            ffi.Float min,
            ffi.Float max)>>;
typedef addSoundFileFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> label,
            ffi.Pointer<ffi.Char> url,
            ffi.Pointer<ffi.Pointer<Soundfile>> sf_zone)>>;
typedef declareFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Float> zone,
            ffi.Pointer<ffi.Char> key,
            ffi.Pointer<ffi.Char> value)>>;

class MetaGlue extends ffi.Struct {
  external ffi.Pointer<ffi.Void> metaInterface;

  external metaDeclareFun declare;
}

typedef metaDeclareFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> ui_interface,
            ffi.Pointer<ffi.Char> key, ffi.Pointer<ffi.Char> value)>>;

/// Interface for the DSP object
class dsp_imp extends ffi.Opaque {}

class ManagerGlue extends ffi.Struct {
  external ffi.Pointer<ffi.Void> managerInterface;

  external allocateFun allocate;

  external destroyFun destroy;
}

/// DSP memory manager functions
typedef allocateFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void> manager_interface, ffi.Size size)>>;
typedef destroyFun = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void> manager_interface,
            ffi.Pointer<ffi.Void> ptr)>>;

class mydsp extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> iVec0;

  @ffi.Int()
  external int fSampleRate;

  @ffi.Float()
  external double fConst1;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> fRec0;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> fVec1;

  @ffi.Int()
  external int IOTA0;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Float> fVec2;

  @ffi.Int()
  external int iConst4;

  @ffi.Int()
  external int iConst5;

  @ffi.Float()
  external double fConst7;

  @ffi.Float()
  external double fConst8;

  @ffi.Float()
  external double fConst9;

  @ffi.Float()
  external double fConst10;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> fRec1;

  @ffi.Float()
  external double fConst11;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;
